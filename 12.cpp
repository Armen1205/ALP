//12) Создать класс базовый класс «вектор на плоскости».
//Элементы класса:
//поля, задающие координаты точки (вещественные поля статус доступа
//protected), определяющей конец вектора (начало вектора находится в точке с
//координатами 0, 0);
//конструктор для инициализации полей;
//метод для вычисления длины вектора
//метод для печати полей и длины вектора.
//Создать производный класс «вектор в трехмерном пространстве».
//Элементы класса:
//дополнительное поле, задающее дополнительную координату;
//конструктор для инициализации полей;
//переопределенный метод для вычисления длины вектора
//переопределенный метод для печати полей и длины вектора (внутри
//переопределенного метода в первую очередь должен вызываться метод из
//базового класса).
//Создать по 1 объекту каждого из классов. Объявить переменную - указатель,
//имеющею тип базового класса, вначале настроить ее на объект базового
//класса, вызвать метод базового класса через указатель на объект. Затем
//настроить ее на объект производного класса, вызвать метод производного
//класса через указатель на объект. Обеспечить динамический полиморфизм.

#include <iostream>
#include "cmath"

class Vector2D{
protected:
    double x,y;
public:
    Vector2D(double x , double y) : x(x), y(y){};

    virtual double Length() {
        return sqrt((x*x + y*y));
    }

    virtual void print() {
        std::cout << " x :" << x << " y: " << y << " ";
    }

    virtual void printLen() {
        std::cout << "\n Len is " << this->Length() << std::endl;
    }
};

class Vector3D : public Vector2D{
protected:
    double x,y,z;

public:
    Vector3D(double x, double y, double z) : Vector2D(x,y), z(z){};

    double Length() {
        return sqrt((x*x + y*y + z*z));
    }

    void print() {
        Vector2D::print();
        std::cout << this->z << std::endl;
    }

    virtual void printLen() {
        std::cout << "\n Len is " << this->Length() << std::endl;
    }


};

////Создать по 1 объекту каждого из классов. Объявить переменную - указатель,
////имеющею тип базового класса, вначале настроить ее на объект базового
////класса, вызвать метод базового класса через указатель на объект. Затем
////настроить ее на объект производного класса, вызвать метод производного
////класса через указатель на объект. Обеспечить динамический полиморфизм.

int main() {
    Vector2D vector2d(1,2);
    Vector3D vector3d(1,2,3);

    Vector2D *pvector = &vector2d;

    pvector->print();
    pvector->printLen();

    pvector = &vector3d;

    pvector->print();
    pvector->printLen();

}

